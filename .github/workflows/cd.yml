name: Continuous Deployment

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  extract-version:
    name: extract-version
    runs-on: ubuntu-latest
    outputs:
      cocmd_version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: "Extract version"
        id: "version"
        run: |
          COCMD_VERSION=$(grep '^version' Cargo.toml | awk -F '"' '{ print $2 }')
          echo version: $COCMD_VERSION
          echo "::set-output name=version::v$COCMD_VERSION"

  publish:
    name: Publishing for ${{ matrix.os }}
    needs: ["extract-version"]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        rust: [stable]
        include:
          - os: macos-latest
            artifact_prefix: macos
            target: x86_64-apple-darwin
            binary_postfix: ""
          - os: ubuntu-latest
            artifact_prefix: linux
            target: x86_64-unknown-linux-gnu
            binary_postfix: ""
          - os: windows-latest
            artifact_prefix: windows
            target: x86_64-pc-windows-msvc
            binary_postfix: ".exe"

    steps:
      - name: Installing Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Installing needed macOS dependencies
        if: matrix.os == 'macos-latest'
        run: brew install openssl@1.1
      - name: Installing needed Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq pkg-config libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
      - name: Checking out sources
        uses: actions/checkout@v1
      - name: Running cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          toolchain: ${{ matrix.rust }}
          args: --release --target ${{ matrix.target }} -p cocmd

      - name: Packaging final binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release

          BINARY_NAME=cocmd${{ matrix.binary_postfix }}
          strip $BINARY_NAME

          RELEASE_NAME=cocmd-${{ matrix.artifact_prefix }}
          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME

          if [[ ${{ runner.os }} == 'Windows' ]]; then
            certutil -hashfile $RELEASE_NAME.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > $RELEASE_NAME.sha256
          else
            shasum -a 256 $RELEASE_NAME.tar.gz > $RELEASE_NAME.sha256
          fi
      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.target }}/release/cocmd-${{ matrix.artifact_prefix }}.tar.gz
            target/${{ matrix.target }}/release/cocmd-${{ matrix.artifact_prefix }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-cargo:
    name: Publishing to Cargo
    needs: ["extract-version"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: |
          sudo apt-get update
          sudo apt-get install -y -qq pkg-config libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --token ${{ secrets.CARGO_API_KEY }} --allow-dirty -p cocmd
  

  macos-publish-homebrew:
    needs: ["publish", "extract-version"]
    runs-on: macos-11
  
    steps:
      - uses: actions/checkout@v2
  
      - name: Print target version
        run: |
          echo Using version ${{ needs.extract-version.outputs.cocmd_version }}
  
      - name: "Setup SSH deploy key"
        uses: webfactory/ssh-agent@fc49353b67b2b7c1e0e6a600572d01a69f2672dd
        with:
          ssh-private-key: ${{ secrets.HOMEBREW_CASK_SSH_PRIVATE_KEY }}
      
      - name: Create and Publish Homebrew Cask
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          VERSION="${{ needs.extract-version.outputs.cocmd_version }}" ./scripts/publish_homebrew_version.sh
  
  build-snap:
    runs-on: ubuntu-latest
    needs: publish
    outputs:
      snap-file: ${{ steps.build-snap.outputs.snap }}
    steps:
    - uses: actions/checkout@v3
    - uses: snapcore/action-build@v1
      id: build-snap

    # Make sure the snap is installable
    - run: |
        sudo snap install --dangerous ${{ steps.build-snap.outputs.snap }}
    # Do some testing with the snap
    - run: |
        gbeuzeboc-snapped-ros2-pkg.snapped-ros2-launch --print-description
    - uses: actions/upload-artifact@v3
      with:
        name: gbeuzeboc-snapped-ros2-pkg
        path: ${{ steps.build-snap.outputs.snap }}

  publish-snap:
    runs-on: ubuntu-latest
    needs: build-snap
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: gbeuzeboc-snapped-ros2-pkg
        path: .
    - uses: snapcore/action-publish@v1
      env:
        SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_LOGIN }}
      with:
        snap: ${{needs.build-snap.outputs.snap-file}}
        release: ${{ startsWith(github.ref, 'refs/tags/') && 'candidate' || 'edge'}}
          
  update-website:
    needs: ["extract-version", "publish", "macos-publish-homebrew", "publish-snap"]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Print target version
        run: |
          echo Using version ${{ needs.extract-version.outputs.cocmd_version }}

      - name: "Setup SSH deploy key"
        uses: webfactory/ssh-agent@fc49353b67b2b7c1e0e6a600572d01a69f2672dd
        with:
          ssh-private-key: ${{ secrets.COCMD_WEBSITE_SSH_PRIVATE_KEY }}
      - name: git config
        run: |
          git config --global user.email "cocmd@cocmd.org"
          git config --global user.name "Github Actions"

      - name: Update version in website
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          VERSION="${{ needs.extract-version.outputs.cocmd_version }}" ./scripts/publish_website_version.sh
      
        